structure CacheLibTheory :> CacheLibTheory =
struct
  val _ = if !Globals.print_thy_loads then print "Loading CacheLibTheory ... " else ()
  open Type Term Thm
  infixr -->

  fun C s t ty = mk_thy_const{Name=s,Thy=t,Ty=ty}
  fun T s t A = mk_thy_type{Tyop=s, Thy=t,Args=A}
  fun V s q = mk_var(s,q)
  val U     = mk_vartype
  (*  Parents *)
  local open arm_stepTheory cacheTheory
  in end;
  val _ = Theory.link_parents
          ("CacheLib",
          Arbnum.fromString "1517930063",
          Arbnum.fromString "581176")
          [("arm_step",
           Arbnum.fromString "1510753628",
           Arbnum.fromString "501602"),
           ("cache",
           Arbnum.fromString "1512468517",
           Arbnum.fromString "779676")];
  val _ = Theory.incorporate_types "CacheLib" [];

  val idvector = 
    let fun ID(thy,oth) = {Thy = thy, Other = oth}
    in Vector.fromList
  [ID("min", "fun"), ID("fcp", "cart"), ID("fcp", "bit0"),
   ID("one", "one"), ID("min", "bool"), ID("fcp", "bit1"),
   ID("pair", "prod"), ID("cache", "cache_state"), ID("cache", "CSET"),
   ID("list", "list"), ID("num", "num"), ID("cache", "actions"),
   ID("cache", "wrTyp"), ID("option", "option"), ID("cache", "SLVAL"),
   ID("bool", "!"), ID("arithmetic", "+"), ID("pair", ","),
   ID("arithmetic", "-"), ID("bool", "/\\"), ID("num", "0"),
   ID("prim_rec", "<"), ID("arithmetic", "<="), ID("min", "="),
   ID("min", "==>"), ID("arithmetic", "BIT1"), ID("arithmetic", "BIT2"),
   ID("cache", "CACHE_CONFIG_ccsidr"), ID("cache", "CCSIDR"),
   ID("cache", "CACHE_CONFIG"), ID("cache", "CACHE_CONFIG_ctr"),
   ID("cache", "CTR"), ID("cache", "CCSIDR_NumSets"),
   ID("cache", "CSET_hist"), ID("cache", "CSET_sl"),
   ID("cache", "CSET_sl_fupd"), ID("cache", "CTR_DminLine"),
   ID("cache", "CacheCleanByAdr"), ID("cache", "CacheInvalidateByAdr"),
   ID("cache", "CacheRead"), ID("cache", "CacheWrite"),
   ID("cache", "CellFill"), ID("cache", "CellRead"), ID("cache", "EP"),
   ID("arithmetic", "EXP"), ID("bool", "F"), ID("cache", "Fill"),
   ID("cache", "Hit"), ID("option", "IS_SOME"), ID("combin", "K"),
   ID("list", "LENGTH"), ID("bool", "LET"), ID("cache", "LineDirty"),
   ID("cache", "LineFill"), ID("arithmetic", "MOD"), ID("option", "NONE"),
   ID("arithmetic", "NUMERAL"), ID("cache", "SLVAL_dirty"),
   ID("cache", "SLVAL_dirty_fupd"), ID("cache", "SLVAL_value"),
   ID("option", "SOME"), ID("option", "THE"), ID("pair", "UNCURRY"),
   ID("combin", "UPDATE"), ID("cache", "WriteBack"),
   ID("cache", "WriteBackLine"), ID("CacheLib", "WriteBackLine_simp"),
   ID("arithmetic", "ZERO"), ID("bool", "\\/"),
   ID("cache", "cache_state_DC"), ID("words", "dimword"),
   ID("bool", "itself"), ID("CacheLib", "invariant_cache"),
   ID("cache", "lineSpec"), ID("CacheLib", "msb_extract"),
   ID("words", "n2w"), ID("cache", "read_mem32"), ID("cache", "si"),
   ID("cache", "tag"), ID("bool", "the_value"), ID("bitstring", "v2w"),
   ID("words", "w2n"), ID("bitstring", "w2v"), ID("cache", "wIdx"),
   ID("words", "word_1comp"), ID("words", "word_add"),
   ID("words", "word_and"), ID("words", "word_extract"),
   ID("words", "word_ge"), ID("words", "word_hi"), ID("words", "word_hs"),
   ID("words", "word_lo"), ID("words", "word_log2"),
   ID("words", "word_lsl"), ID("words", "word_lsr"),
   ID("words", "word_or"), ID("cache", "wrTyp_flag"),
   ID("cache", "wrTyp_value"), ID("CacheLib", "write_mem32"),
   ID("bool", "~")]
  end;
  local open SharingTables
  in
  val tyvector = build_type_vector idvector
  [TYOP [3], TYOP [2, 0], TYOP [2, 1], TYOP [2, 2], TYOP [4],
   TYOP [1, 4, 3], TYOP [5, 0], TYOP [2, 6], TYOP [2, 7], TYOP [2, 8],
   TYOP [2, 9], TYOP [1, 4, 10], TYOP [0, 11, 5], TYOP [2, 3],
   TYOP [2, 13], TYOP [1, 4, 14], TYOP [6, 12, 15], TYOP [6, 11, 16],
   TYOP [0, 17, 12], TYOP [7], TYOP [0, 19, 11], TYOP [0, 11, 20],
   TYOP [2, 14], TYOP [1, 4, 22], TYOP [0, 23, 21], TYV "'b", TYOP [8],
   TYV "'a", TYOP [0, 27, 26], TYOP [6, 28, 25], TYV "'c",
   TYOP [6, 28, 30], TYOP [6, 25, 31], TYOP [6, 11, 32], TYOP [6, 27, 33],
   TYOP [0, 34, 29], TYOP [0, 11, 26], TYOP [9, 4], TYOP [10],
   TYOP [6, 38, 11], TYOP [11], TYOP [6, 40, 39], TYOP [9, 41], TYOP [12],
   TYOP [14], TYOP [13, 44], TYOP [0, 11, 45], TYOP [5, 6], TYOP [5, 47],
   TYOP [1, 4, 48], TYOP [0, 27, 4], TYOP [0, 50, 4], TYOP [0, 25, 4],
   TYOP [0, 52, 4], TYOP [0, 30, 4], TYOP [0, 54, 4], TYOP [0, 44, 4],
   TYOP [0, 56, 4], TYOP [0, 19, 4], TYOP [0, 58, 4], TYOP [0, 23, 4],
   TYOP [0, 60, 4], TYOP [0, 15, 4], TYOP [0, 62, 4], TYOP [0, 11, 4],
   TYOP [0, 64, 4], TYOP [0, 49, 4], TYOP [0, 66, 4], TYOP [0, 28, 4],
   TYOP [0, 68, 4], TYOP [0, 36, 4], TYOP [0, 70, 4], TYOP [0, 12, 4],
   TYOP [0, 72, 4], TYOP [0, 42, 4], TYOP [0, 74, 4], TYOP [0, 38, 4],
   TYOP [0, 76, 4], TYOP [0, 45, 4], TYOP [0, 78, 4], TYOP [0, 43, 4],
   TYOP [0, 80, 4], TYOP [0, 38, 38], TYOP [0, 38, 82], TYOP [0, 33, 34],
   TYOP [0, 27, 84], TYOP [0, 31, 32], TYOP [0, 25, 86], TYOP [6, 23, 11],
   TYOP [0, 11, 88], TYOP [0, 23, 89], TYOP [6, 11, 36], TYOP [6, 23, 91],
   TYOP [0, 91, 92], TYOP [0, 23, 93], TYOP [6, 12, 36], TYOP [6, 11, 95],
   TYOP [6, 23, 96], TYOP [0, 96, 97], TYOP [0, 23, 98], TYOP [6, 43, 95],
   TYOP [6, 11, 100], TYOP [6, 23, 101], TYOP [0, 101, 102],
   TYOP [0, 23, 103], TYOP [0, 36, 91], TYOP [0, 11, 105],
   TYOP [6, 11, 12], TYOP [0, 12, 107], TYOP [0, 11, 108],
   TYOP [0, 32, 33], TYOP [0, 11, 110], TYOP [6, 11, 91],
   TYOP [0, 91, 112], TYOP [0, 11, 113], TYOP [6, 36, 38],
   TYOP [6, 12, 115], TYOP [6, 11, 116], TYOP [6, 11, 117],
   TYOP [0, 117, 118], TYOP [0, 11, 119], TYOP [6, 38, 36],
   TYOP [6, 11, 121], TYOP [6, 11, 122], TYOP [0, 122, 123],
   TYOP [0, 11, 124], TYOP [6, 12, 44], TYOP [6, 38, 126],
   TYOP [6, 11, 127], TYOP [6, 11, 128], TYOP [0, 128, 129],
   TYOP [0, 11, 130], TYOP [0, 16, 17], TYOP [0, 11, 132],
   TYOP [0, 95, 96], TYOP [0, 11, 134], TYOP [0, 116, 117],
   TYOP [0, 11, 136], TYOP [0, 121, 122], TYOP [0, 11, 138],
   TYOP [0, 127, 128], TYOP [0, 11, 140], TYOP [0, 100, 101],
   TYOP [0, 11, 142], TYOP [0, 25, 29], TYOP [0, 28, 144],
   TYOP [0, 30, 31], TYOP [0, 28, 146], TYOP [0, 38, 115],
   TYOP [0, 36, 148], TYOP [0, 44, 126], TYOP [0, 12, 150],
   TYOP [0, 15, 16], TYOP [0, 12, 152], TYOP [0, 36, 95],
   TYOP [0, 12, 154], TYOP [0, 115, 116], TYOP [0, 12, 156],
   TYOP [6, 42, 91], TYOP [0, 91, 158], TYOP [0, 42, 159],
   TYOP [6, 42, 118], TYOP [0, 118, 161], TYOP [0, 42, 162],
   TYOP [0, 36, 121], TYOP [0, 38, 164], TYOP [6, 38, 107],
   TYOP [0, 107, 166], TYOP [0, 38, 167], TYOP [0, 126, 127],
   TYOP [0, 38, 169], TYOP [0, 95, 100], TYOP [0, 43, 171], TYOP [0, 4, 4],
   TYOP [0, 4, 173], TYOP [0, 38, 76], TYOP [0, 15, 62], TYOP [0, 11, 64],
   TYOP [1, 4, 2], TYOP [0, 178, 4], TYOP [0, 178, 179], TYOP [0, 49, 66],
   TYOP [0, 12, 72], TYOP [0, 37, 4], TYOP [0, 37, 183], TYOP [0, 45, 78],
   TYOP [13, 11], TYOP [0, 186, 4], TYOP [0, 186, 187], TYOP [6, 11, 38],
   TYOP [6, 11, 189], TYOP [0, 190, 4], TYOP [0, 190, 191],
   TYOP [0, 29, 4], TYOP [0, 29, 193], TYOP [28], TYOP [29],
   TYOP [0, 196, 195], TYOP [31], TYOP [0, 196, 198], TYOP [0, 195, 49],
   TYOP [0, 26, 42], TYOP [0, 26, 46], TYOP [0, 26, 26], TYOP [0, 46, 46],
   TYOP [0, 204, 203], TYOP [0, 198, 178], TYOP [6, 36, 12],
   TYOP [0, 19, 207], TYOP [0, 97, 208], TYOP [6, 12, 37],
   TYOP [6, 36, 210], TYOP [0, 19, 211], TYOP [0, 97, 212],
   TYOP [0, 102, 208], TYOP [0, 11, 15], TYOP [0, 166, 215],
   TYOP [0, 123, 15], TYOP [0, 158, 186], TYOP [0, 92, 58],
   TYOP [0, 46, 204], TYOP [0, 37, 38], TYOP [0, 62, 62], TYOP [0, 64, 64],
   TYOP [0, 72, 72], TYOP [0, 12, 12], TYOP [0, 225, 225],
   TYOP [0, 46, 29], TYOP [0, 227, 227], TYOP [0, 76, 76],
   TYOP [0, 38, 11], TYOP [0, 230, 230], TYOP [0, 191, 191],
   TYOP [0, 190, 11], TYOP [0, 233, 233], TYOP [0, 207, 4],
   TYOP [0, 235, 235], TYOP [0, 211, 4], TYOP [0, 237, 237],
   TYOP [6, 46, 42], TYOP [0, 239, 4], TYOP [0, 240, 240],
   TYOP [0, 112, 4], TYOP [0, 19, 239], TYOP [0, 161, 243],
   TYOP [0, 44, 44], TYOP [0, 173, 245], TYOP [0, 44, 215],
   TYOP [0, 44, 45], TYOP [0, 11, 186], TYOP [0, 45, 44],
   TYOP [0, 186, 11], TYOP [0, 189, 4], TYOP [0, 11, 76],
   TYOP [0, 253, 252], TYOP [0, 189, 11], TYOP [0, 11, 230],
   TYOP [0, 256, 255], TYOP [0, 11, 252], TYOP [0, 258, 191],
   TYOP [0, 11, 255], TYOP [0, 260, 233], TYOP [0, 36, 72],
   TYOP [0, 262, 235], TYOP [0, 210, 4], TYOP [0, 36, 264],
   TYOP [0, 265, 237], TYOP [0, 12, 183], TYOP [0, 267, 264],
   TYOP [0, 46, 74], TYOP [0, 269, 240], TYOP [0, 28, 28],
   TYOP [0, 26, 271], TYOP [0, 27, 272], TYOP [0, 5, 225],
   TYOP [0, 11, 274], TYOP [0, 45, 204], TYOP [0, 11, 276],
   TYOP [0, 19, 12], TYOP [0, 129, 278], TYOP [0, 118, 208],
   TYOP [0, 19, 196], TYOP [71, 48], TYOP [0, 282, 38], TYOP [0, 19, 190],
   TYOP [0, 88, 284], TYOP [0, 38, 178], TYOP [0, 38, 49],
   TYOP [0, 107, 37], TYOP [0, 88, 20], TYOP [0, 37, 15],
   TYOP [0, 178, 38], TYOP [0, 49, 38], TYOP [0, 15, 37], TYOP [0, 11, 37],
   TYOP [0, 11, 11], TYOP [0, 11, 295], TYOP [0, 49, 49],
   TYOP [0, 49, 297], TYOP [0, 15, 5], TYOP [0, 38, 299],
   TYOP [0, 38, 300], TYOP [0, 38, 295], TYOP [0, 38, 302],
   TYOP [0, 43, 15]]
  end
  val _ = Theory.incorporate_consts "CacheLib" tyvector
     [("write_mem32", 18), ("msb_extract", 24), ("invariant_cache", 4),
      ("WriteBackLine_simp", 35)];

  local open SharingTables
  in
  val tmvector = build_term_vector idvector tyvector
  [TMV("LSB", 11), TMV("LSB2", 11), TMV("MSB", 11), TMV("MSB2", 11),
   TMV("_", 36), TMV("_", 12), TMV("_", 37), TMV("_", 42), TMV("a", 11),
   TMV("a", 36), TMV("a", 38), TMV("a'", 11), TMV("add", 11), TMV("b", 11),
   TMV("b", 12), TMV("b", 38), TMV("bi", 38), TMV("bmL", 11),
   TMV("bmM", 11), TMV("c", 11), TMV("c", 38), TMV("d", 11), TMV("d", 38),
   TMV("data", 43), TMV("dc", 28), TMV("dc", 36), TMV("dc'", 36),
   TMV("h", 42), TMV("i", 11), TMV("i'", 11), TMV("l", 45), TMV("li", 27),
   TMV("ln", 38), TMV("m", 12), TMV("m", 38), TMV("m'", 12), TMV("n", 30),
   TMV("n", 38), TMV("ni", 38), TMV("nl", 38), TMV("ns", 38),
   TMV("nt", 38), TMV("pa", 11), TMV("pa'", 11), TMV("pm", 25),
   TMV("pm", 12), TMV("pm'", 12), TMV("ps", 38), TMV("s", 19),
   TMV("s", 38), TMV("s'", 19), TMV("sid", 11), TMV("sl", 46),
   TMV("slval", 44), TMV("sn", 38), TMV("st", 38), TMV("state", 19),
   TMV("sval", 15), TMV("t", 11), TMV("t'", 11), TMV("tg", 11),
   TMV("v", 15), TMV("v", 49), TMV("v", 46), TMV("va", 23), TMV("va'", 23),
   TMV("value", 15), TMV("vl", 37), TMV("vlc", 37), TMV("vlc'", 15),
   TMV("vlc'", 37), TMV("vlm", 15), TMV("w1", 11), TMV("w2", 11),
   TMV("wi", 11), TMV("wi", 38), TMV("wi'", 38), TMV("x", 11), TMC(15, 51),
   TMC(15, 53), TMC(15, 55), TMC(15, 57), TMC(15, 59), TMC(15, 61),
   TMC(15, 63), TMC(15, 65), TMC(15, 67), TMC(15, 69), TMC(15, 71),
   TMC(15, 73), TMC(15, 75), TMC(15, 77), TMC(15, 79), TMC(15, 81),
   TMC(16, 83), TMC(17, 85), TMC(17, 87), TMC(17, 90), TMC(17, 94),
   TMC(17, 99), TMC(17, 104), TMC(17, 106), TMC(17, 109), TMC(17, 111),
   TMC(17, 114), TMC(17, 120), TMC(17, 125), TMC(17, 131), TMC(17, 133),
   TMC(17, 135), TMC(17, 137), TMC(17, 139), TMC(17, 141), TMC(17, 143),
   TMC(17, 145), TMC(17, 147), TMC(17, 149), TMC(17, 151), TMC(17, 153),
   TMC(17, 155), TMC(17, 157), TMC(17, 160), TMC(17, 163), TMC(17, 165),
   TMC(17, 168), TMC(17, 170), TMC(17, 172), TMC(18, 83), TMC(19, 174),
   TMC(20, 38), TMC(21, 175), TMC(22, 175), TMC(23, 174), TMC(23, 176),
   TMC(23, 177), TMC(23, 180), TMC(23, 181), TMC(23, 182), TMC(23, 184),
   TMC(23, 175), TMC(23, 185), TMC(23, 188), TMC(23, 192), TMC(23, 194),
   TMC(24, 174), TMC(25, 82), TMC(26, 82), TMC(27, 197), TMC(30, 199),
   TMC(32, 200), TMC(33, 201), TMC(34, 202), TMC(35, 205), TMC(36, 206),
   TMC(37, 209), TMC(38, 209), TMC(39, 213), TMC(40, 214), TMC(41, 216),
   TMC(42, 217), TMC(43, 218), TMC(44, 83), TMC(45, 4), TMC(46, 209),
   TMC(47, 219), TMC(48, 78), TMC(49, 174), TMC(49, 220), TMC(50, 221),
   TMC(51, 222), TMC(51, 223), TMC(51, 224), TMC(51, 226), TMC(51, 228),
   TMC(51, 229), TMC(51, 231), TMC(51, 232), TMC(51, 234), TMC(51, 236),
   TMC(51, 238), TMC(51, 241), TMC(52, 242), TMC(53, 244), TMC(54, 83),
   TMC(55, 45), TMC(56, 82), TMC(57, 56), TMC(58, 246), TMC(59, 247),
   TMC(60, 248), TMC(60, 249), TMC(61, 250), TMC(61, 251), TMC(62, 254),
   TMC(62, 257), TMC(62, 259), TMC(62, 261), TMC(62, 263), TMC(62, 266),
   TMC(62, 268), TMC(62, 270), TMC(63, 273), TMC(63, 275), TMC(63, 277),
   TMC(64, 279), TMC(65, 280), TMC(66, 35), TMC(67, 38), TMC(68, 174),
   TMC(69, 281), TMC(70, 283), TMC(72, 4), TMC(73, 285), TMC(74, 24),
   TMC(75, 230), TMC(75, 286), TMC(75, 287), TMC(76, 288), TMC(77, 289),
   TMC(78, 289), TMC(79, 282), TMC(80, 290), TMC(81, 291), TMC(81, 292),
   TMC(82, 293), TMC(82, 294), TMC(83, 21), TMC(84, 295), TMC(85, 296),
   TMC(85, 298), TMC(86, 296), TMC(87, 301), TMC(87, 303), TMC(88, 180),
   TMC(88, 181), TMC(89, 177), TMC(90, 177), TMC(91, 177), TMC(92, 297),
   TMC(93, 256), TMC(94, 256), TMC(95, 296), TMC(96, 80), TMC(97, 304),
   TMC(98, 18), TMC(99, 173)]
  end
  local
  val DT = Thm.disk_thm val read = Term.read_raw tmvector
  in
  fun op dirty_axiom x = x
    val op dirty_axiom =
    DT(((("CacheLib",1),[]),[]),
       [read"%92%30%144%245%165$0@@@%245%186%191$0@@@@|@"])
  fun op eviction_policy_axiom x = x
    val op eviction_policy_axiom =
    DT(((("CacheLib",52),[]),[]),
       [read"%90%27%85%58%88%25%85%28%85%77%144%141%160%121$4@%101$3@$2@@@@%190$0@@@%165%151$2$1@@$0@@@|@|@|@|@|@"])
  fun op invariant_cache_def x = x
    val op invariant_cache_def =
    DT(((("CacheLib",0),[]),[]),
       [read"%132%211@%128%85%42%134%230$0@%214%185%146%145%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%146%207@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$0@|@@%128%85%28%85%58%91%75%91%38%91%41%82%56%170%2%170%0%170%3%170%1%128%233%153%148%209$4@@@@%215%185%145%207@@@@@%128%234%149%147%209$4@@@@%216%185%145%207@@@@@%128%130$6@%127%185%146%145%145%145%146%207@@@@@@@$5@@@%128%134%230$8@$1@@$8@@%128%134%230$9@$0@@$9@@%128%134%230%241%239$8@$5@@$9@@$3@@%241%239$8@$5@@$9@@@%134%230%239%214$7@@%185%146%207@@@@$2@@%239%214$7@@%185%146%207@@@@@@@@@@|@%240%239%214%185%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%207@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%127%185%146%145%145%145%146%207@@@@@@@%94$5@$4@@@@%127%185%146%145%145%145%146%207@@@@@@@$4@@@|@%240%214%185%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%207@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%94$4@$3@@@|@%227%239%240%214%185%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%207@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$3@@$3@@@|@%240%214%185%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%207@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$2@@|@|@|@|@|@|@@%128%82%48%82%50%128%135%153%148%209$1@@@@%153%148%209$0@@@@@%136%149%147%209$1@@@@%149%147%209$0@@@@@|@|@@%90%27%85%28%85%58%88%25%85%77%144%141%160%121$4@%101$2@$1@@@@%190$0@@@%165%151$1$3@@$0@@@|@|@|@|@|@@@@@"])
  fun op write_mem32_def x = x
    val op write_mem32_def =
    DT(((("CacheLib",6),[("pair",[16])]),["DISK_THM"]),
       [read"%85%12%89%45%84%66%137%244%108$2@%118$1@$0@@@@%172%45%172%45%172%45%172%45$0|@%202%228$5@%214%185%145%145%207@@@@@@%231%185%145%145%145%145%145%207@@@@@@@%185%146%145%145%146%207@@@@@@$3@@$0@@|@%202%228$4@%214%185%146%207@@@@@%231%185%145%145%145%146%207@@@@@@%185%146%145%145%145%207@@@@@@$2@@$0@@|@%202%228$3@%214%185%145%207@@@@@%231%185%145%145%145%145%207@@@@@@%185%146%145%145%207@@@@@$1@@$0@@|@%202$2@%231%185%145%145%145%207@@@@@%129@$0@@$1@@@|@|@|@"])
  fun op WriteBackLine_simp_def x = x
    val op WriteBackLine_simp_def =
    DT(((("CacheLib",11),[("pair",[16])]),["DISK_THM"]),
       [read"%78%31%85%58%79%44%87%24%80%36%143%206%95$4@%103$3@%96$2@%115$1@$0@@@@@@%173%63%114%201$5@%152%167%203$4@%189%187%166%162@@%191$0$4@@@@@$0@@@$2$5@@@$2@@$3@|@%151$1$4@@@@|@|@|@|@|@"])
  fun op msb_extract_def x = x
    val op msb_extract_def =
    DT(((("CacheLib",39),[]),[]),
       [read"%83%64%85%42%82%56%134%213$2@$1@$0@@%177%196%28%194%58%75%175%40%175%39%239%241%239$3@$1@@$4@@%94$0@%185%146%207@@@@|@%222%153%148%209$4@@@@@|@%223%238%229%149%147%209$3@@@@%216%185%145%207@@@@@@@||@|@@%212%97$2@$1@@$0@@@|@|@|@"])
  fun op lt_mod_thm x = x
    val op lt_mod_thm =
    DT(((("CacheLib",2),
        [("arithmetic",[24,25,27,41,46,59,73,95,178,185,222]),
         ("bool",[25,35,52,53,57,62,95,100,103,104,123]),
         ("numeral",[3,5,8])]),["DISK_THM"]),
       [read"%91%10%91%15%91%20%91%22%144%128%130$3@$2@@%128%131$2@$1@@%130$1@$0@@@@%130%183$3@$0@@%183$2@$0@@@|@|@|@|@"])
  fun op adr_neq3_thm x = x
    val op adr_neq3_thm =
    DT(((("CacheLib",3),
        [("arithmetic",
         [18,19,24,27,28,41,46,71,73,84,95,125,178,181,185,215,220,273,
          317]),("bit",[2,5]),
         ("bool",
         [8,14,25,26,27,29,31,35,50,51,52,53,55,57,62,63,103,104,123]),
         ("combin",[19]),("fcp",[13,15,38,39,60,61,62,63]),
         ("list",[29,291]),("numeral",[0,3,5,6,7,8,9,12,15,16,17,21,28]),
         ("numeral_bit",[1,2,5,21,22,23,24,25,26,27,28,29]),
         ("pred_set",[18,88]),("rich_list",[18,282,345]),
         ("sat",[1,3,5,6,7,11,12,13,15,17,18,23]),
         ("words",
         [1,2,5,28,32,33,58,90,111,143,159,192,199,200,205,206,237,300,353,
          371,397,398,408,409,411,665,668])]),["DISK_THM"]),
       [read"%85%8%85%13%85%19%91%37%170%18%170%17%144%130$2@%185%146%145%145%145%146%207@@@@@@@@%144%128%134%230$5@$0@@$5@@%128%134%230$4@$1@@$4@@%134%230$3@$1@@$3@@@@%144%245%134%241%239$4@$2@@$5@@%241%239$3@$2@@$5@@@@%245%134$4@$3@@@@@|@%227%239%240%214%185%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%207@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$1@@$1@@@|@%240%214%185%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%207@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$0@@|@|@|@|@"])
  fun op adr_neq2_thm x = x
    val op adr_neq2_thm =
    DT(((("CacheLib",4),[]),["cheat"]),
       [read"%85%8%85%13%85%19%91%37%170%18%170%17%144%130$2@%185%146%145%145%145%146%207@@@@@@@@%144%128%134%230$5@$1@@$5@@%128%134%230$4@$0@@$4@@%134%230$3@$0@@$3@@@@%144%245%134$4@$3@@@%245%134%241%239$5@$2@@$4@@%241%239$5@$2@@$3@@@@@@|@%227%239%240%214%185%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%207@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$1@@$1@@@|@%240%214%185%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%207@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$0@@|@|@|@|@"])
  fun op adr_neq_thm x = x
    val op adr_neq_thm =
    DT(((("CacheLib",5),
        [("arithmetic",
         [18,19,24,27,41,46,71,73,84,95,125,178,185,215,220,273,317]),
         ("bit",[2,5]),
         ("bool",
         [14,25,26,27,29,31,35,50,51,52,53,55,57,62,63,103,104,123]),
         ("combin",[19]),("fcp",[13,15,38,39,60,61,62,63]),
         ("list",[29,291]),("num",[9]),
         ("numeral",[0,3,5,6,7,8,9,12,15,16,17,21,28]),
         ("numeral_bit",[1,2,5,21,22,23,24,25,26,27,28,29]),
         ("pred_set",[18,88]),("rich_list",[18,282,345]),
         ("sat",[1,3,5,6,7,11,12,13,15,17,18,23]),
         ("words",
         [1,2,5,28,32,33,58,90,111,143,159,192,199,200,205,206,237,300,408,
          409,411,665,668])]),["DISK_THM"]),
       [read"%85%8%85%13%85%19%85%21%91%37%170%18%170%17%144%130$2@%185%146%145%145%145%146%207@@@@@@@@%144%128%134%230$6@$1@@$6@@%134%230$5@$1@@$5@@@%144%128%134%230$4@$0@@$4@@%134%230$3@$0@@$3@@@%144%245%134%239$6@$2@@%239$5@$2@@@@%245%134%241%239$6@$2@@$4@@%241%239$5@$2@@$3@@@@@@@|@%227%239%240%214%185%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%207@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$1@@$1@@@|@%240%214%185%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%207@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@$0@@|@|@|@|@|@"])
  fun op write_read_thm x = x
    val op write_read_thm =
    DT(((("CacheLib",7),
        [("CacheLib",[6]),("arithmetic",[19,63,125,134,215,220,222]),
         ("bitstring",[19]),
         ("bool",
         [8,14,25,26,27,29,31,35,47,50,51,52,53,55,57,62,63,70,91,98,104,
          123,128,146]),("cache",[319]),("combin",[7,8,19]),
         ("fcp",[13,15,19,38,39,60,61,62,63]),("list",[48,280,282,298]),
         ("numeral",[0,3,5,6,7,8,12,15,16,17,21,24,28]),
         ("numeral_bit",[5]),("pred_set",[18,88]),
         ("sat",[1,3,5,6,7,11,12,13,15,17,18]),
         ("words",
         [5,33,49,51,58,69,90,101,102,114,143,144,156,228,300,321,322,324,
          326,328,339,340,353,377,384,621,641,649,661,665,
          668])]),["DISK_THM"]),
       [read"%85%8%84%61%89%33%171%35%138%217%102$3@$0@@@%224$2@@|@%244%108$2@%118$0@$1@@@@|@|@|@"])
  fun op write_read_unch_thm x = x
    val op write_read_unch_thm =
    DT(((("CacheLib",8),
        [("CacheLib",[6]),("arithmetic",[19,215,220,273]),
         ("blast",[0,1,3,4,9,11]),
         ("bool",
         [8,14,25,26,27,29,50,51,52,53,55,57,62,63,70,91,98,104,123,128,
          146]),("cache",[319]),("combin",[7,8,19]),("fcp",[13,15]),
         ("list",[29,291]),
         ("numeral",[0,3,4,5,6,7,8,9,15,16,17,21,28,32,34,35,39,40]),
         ("pred_set",[18,88]),("rich_list",[18,282,345]),
         ("sat",[1,3,5,6,7,11,12,13,15,17,18,19,20]),
         ("words",
         [5,58,69,143,156,160,300,321,322,324,326,328,340,353,377,384,480,
          481,482,498,665,668])]),["DISK_THM"]),
       [read"%85%8%85%11%84%61%89%33%89%35%144%208%128%237%228$3@%214%185%145%145%207@@@@@@$4@@%128%236%228$3@%214%185%145%145%207@@@@@@%214%185%145%145%207@@@@@@%236%228$4@%214%185%145%145%207@@@@@@%214%185%145%145%207@@@@@@@@%128%235$3@%228$4@%214%185%145%145%207@@@@@@@%128%236%228$3@%214%185%145%145%207@@@@@@%214%185%145%145%207@@@@@@%236%228$4@%214%185%145%145%207@@@@@@%214%185%145%145%207@@@@@@@@@%144%137$0@%244%108$4@%118$1@$2@@@@@%138%217%102$3@$0@@@%217%102$3@$1@@@@@|@|@|@|@|@"])
  fun op wrtBck_dirty_thm x = x
    val op wrtBck_dirty_thm =
    DT(((("CacheLib",9),
        [("arithmetic",[19,22,26,27,46,63,71,73,95,125,178,181,185]),
         ("arm_step",[30]),("bit",[2]),
         ("bool",[14,25,27,31,35,52,53,55,57,62,63,103,104,123,128,146]),
         ("cache",[183,236,325,332]),("combin",[7,12,19]),
         ("fcp",[60,61,62,63]),("numeral",[0,3,5,7,8,12,15,16,17]),
         ("numeral_bit",[5,21,25,26,28,29]),("option",[16]),
         ("pair",[8,9,16]),("rich_list",[345]),
         ("words",[1,111,143,203,206,409,665,668])]),["DISK_THM"]),
       [read"%85%28%85%58%89%45%88%25%91%37%82%56%178%197%26%46%144%131$3@%210%220@@@%91%75%144%131$0@$4@@%245%181%104$8@%101$7@$2@@@@@|@@||@@%205%105$5@%110$4@%120$3@%116$2@$1@@@@@$0@@|@|@|@|@|@|@"])
  fun op wrtBck_memory_thm x = x
    val op wrtBck_memory_thm =
    DT(((("CacheLib",10),
        [("CacheLib",[0,2,4]),
         ("arithmetic",
         [19,22,24,25,26,27,41,46,59,62,63,71,73,75,77,78,84,95,99,125,130,
          177,178,181,182,185,188,204,205,215,220,222,273]),
         ("arm_step",[30]),("bit",[2]),("bitstring",[71]),
         ("blast",[0,1,3,4,9]),
         ("bool",
         [8,14,25,26,27,29,31,35,42,50,51,52,53,55,57,62,63,70,91,95,98,
          100,103,104,123,128,146]),("cache",[183,236,319,325,332,338]),
         ("combin",[7,8,11,12,15,16,19,33,35]),
         ("fcp",[13,15,19,38,39,60,61,62,63]),("list",[23,28,29,291]),
         ("marker",[6,9]),("num",[9]),
         ("numeral",
         [0,3,4,5,6,7,8,9,12,15,16,17,18,21,24,28,32,33,34,35,39,40]),
         ("numeral_bit",[5,21,25,26,28,29]),("option",[16]),
         ("pair",[4,8,9,45,46]),("pred_set",[18,88]),
         ("rich_list",[18,19,58,282,288,345]),
         ("sat",[1,3,5,6,7,11,12,13,15,17,18]),
         ("words",
         [1,5,33,49,51,58,69,90,101,102,111,114,140,143,144,150,156,192,
          200,203,205,206,228,247,300,321,322,324,326,328,339,340,353,377,
          384,394,407,409,426,456,608,621,641,644,649,661,665,
          668])]),["DISK_THM", "cheat"]),
       [read"%85%28%85%58%89%45%88%25%82%56%91%37%178%197%26%46%174%54%174%32%144%131$4@%210%220@@@%91%75%144%131$0@$5@@%170%42%144%211@%144%181%104$11@%101$10@$8@@@@%133%159%106$11@%111$10@%123$1@$5@@@@@%221%217%102$0@$4@@@@@@|@%241%239$9@%94%94$2@$1@@%185%146%207@@@@@%241%239$10@%94$1@%185%146%207@@@@@%239%214$0@@%185%146%207@@@@@@@|@@|@%222%153%148%209$4@@@@@|@%223%238%229%149%147%209$3@@@@%216%185%145%207@@@@@@@||@@%205%105$5@%110$4@%120$3@%116$2@$0@@@@@$1@@|@|@|@|@|@|@"])
  fun op wrtBckLine_dcEQpm'_thm x = x
    val op wrtBckLine_dcEQpm'_thm =
    DT(((("CacheLib",12),
        [("CacheLib",[10,11]),
         ("arithmetic",
         [19,22,25,26,27,46,63,71,73,95,125,178,181,182,185]),
         ("arm_step",[30]),("bit",[2]),
         ("bool",
         [8,14,25,26,27,29,31,35,51,52,53,55,57,62,63,95,100,103,104,123,
          128,146]),("cache",[183,236,325,338]),
         ("combin",[7,8,11,12,15,16,19,33,35]),("fcp",[60,61,62,63]),
         ("list",[23,28]),("marker",[6,9]),("num",[9]),
         ("numeral",[0,3,5,7,8,12,15,16,17]),
         ("numeral_bit",[5,21,25,26,28,29]),("option",[10,16]),
         ("pair",[4,7,8,9,16,45,46]),("rich_list",[18,19,58,288,345]),
         ("words",[1,111,203,206])]),["DISK_THM", "cheat"]),
       [read"%85%28%85%58%89%45%88%25%91%37%82%56%178%197%26%46%174%54%174%32%144%131$5@%210%220@@@%91%75%144%131$0@$6@@%170%42%144%211@%144%181%104$11@%101$10@$8@@@@%133%159%106$11@%111$10@%123$1@$8@@@@@%221%217%102$0@$4@@@@@@|@%241%239$9@%94%94$2@$1@@%185%146%207@@@@@%241%239$10@%94$1@%185%146%207@@@@@%239%214$0@@%185%146%207@@@@@@@|@@|@%222%153%148%209$3@@@@@|@%223%238%229%149%147%209$2@@@@%216%185%145%207@@@@@@@||@@%205%105$5@%110$4@%120$3@%116$2@$1@@@@@$0@@|@|@|@|@|@|@"])
  fun op wrtBckLine_pmEQpm'IfNotDirty_thm x = x
    val op wrtBckLine_pmEQpm'IfNotDirty_thm =
    DT(((("CacheLib",13),
        [("CacheLib",[11]),("arithmetic",[26,27]),
         ("bool",[8,25,26,27,31,52,53,55,57,104,123,128,146]),
         ("cache",[325,332]),("combin",[7,8,11,15,16,19,33,35]),
         ("marker",[6,9]),("pair",[4,7,8,9,16,45,46]),
         ("words",[203,206])]),["DISK_THM"]),
       [read"%85%28%85%58%89%45%88%25%91%37%82%56%178%197%4%46%144%245%181%104$7@%101$6@$4@@@@@%85%43%133%221%217%102$0@$6@@@@%221%217%102$0@$1@@@@|@@||@@%205%105$5@%110$4@%120$3@%116$2@$1@@@@@$0@@|@|@|@|@|@|@"])
  fun op cellFill_memeq_thm x = x
    val op cellFill_memeq_thm =
    DT(((("CacheLib",14),
        [("bool",[25,31,35,55,57,104,128,146]),("cache",[329]),
         ("combin",[7,19]),("words",[144])]),["DISK_THM"]),
       [read"%91%75%85%42%89%45%169%57%133$0@%221%217%102%241$2@%239%214$3@@%185%146%207@@@@@$1@@@@|@%158%124$2@%102$1@$0@@@%214$2@@@|@|@|@"])
  fun op linefill_memeq_t x = x
    val op linefill_memeq_t =
    DT(((("CacheLib",15),
        [("arithmetic",
         [19,22,24,25,26,27,41,46,59,62,63,71,73,81,93,95,99,125,177,178,
          181,182,185,222]),("arm_step",[30]),("bit",[2]),
         ("bool",
         [14,25,26,27,29,31,35,50,51,52,53,55,57,62,63,95,100,103,104,123,
          128,146]),("cache",[183,186,189,329,330]),
         ("combin",[7,8,11,12,15,16,19,33,35]),("fcp",[60,61,62,63]),
         ("list",[20,23,28,48,56,105]),("marker",[6,9]),("num",[9]),
         ("numeral",[0,3,5,6,7,8,12,15,16,17]),
         ("numeral_bit",[5,21,25,26,28,29]),("option",[16]),
         ("pair",[4,8,9,45,46]),("rich_list",[18,19,58,288,345]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("words",[1,111,144,192,200,203,206,407,668])]),["DISK_THM"]),
       [read"%90%27%85%28%85%58%89%45%88%25%91%37%82%56%180%200%52%7%174%54%174%32%144%131$5@%210%220@@@%91%75%144%131$0@$6@@%170%42%133%188%191$5$10@@@%214$1@@@%221%217%102$0@$9@@@@|@%241%239$9@%94%94$2@$1@@%185%146%207@@@@@%241%239$10@%94$1@%185%146%207@@@@@%239%214$0@@%185%146%207@@@@@@@|@@|@%222%153%148%209$3@@@@@|@%223%238%229%149%147%209$2@@@@%216%185%145%207@@@@@@@||@@%182%122$6@%105$5@%110$4@%120$3@%116$2@$1@@@@@@$0@@|@|@|@|@|@|@|@"])
  fun op wIdx_extract_thm x = x
    val op wIdx_extract_thm =
    DT(((("CacheLib",16),
        [("arithmetic",[273]),("bitstring",[20,39,53,71,101,102]),
         ("bool",[14,25,26,31,35,50,52,53,55,57,62,63,104,123]),
         ("cache",[322]),("combin",[19]),("fcp",[13,15]),("list",[29,291]),
         ("numeral",[3,7,15,16,17]),("rich_list",[18,282,345]),
         ("words",[228,665])]),["DISK_THM"]),
       [read"%85%42%82%56%170%74%134$0@%232%94%222%153%148%209$1@@@@@%185%145%207@@@@%185%146%207@@@$2@@|@%226$1@$0@@|@|@"])
  fun op wi_lt_line_size_thm x = x
    val op wi_lt_line_size_thm =
    DT(((("CacheLib",17),
        [("CacheLib",[16]),
         ("arithmetic",[24,25,27,41,46,62,73,95,132,178,181,182,185,202]),
         ("bool",[8,25,31,35,51,53,55,57,62,95,100,103,104]),
         ("cache",[323]),("combin",[19]),("numeral",[3,5,8]),("pair",[16]),
         ("sat",[1,3,5,6,7,11,12,13,15]),("words",[268])]),["DISK_THM"]),
       [read"%83%64%85%42%82%56%176%195%28%193%58%75%174%39%131$1@%127%161%185%146%207@@@$0@@%185%145%207@@@@|@%222%153%148%209$3@@@@@||@|@@%212%97$2@$1@@$0@@|@|@|@"])
  fun op wIdx_lt_dimword48_thm x = x
    val op wIdx_lt_dimword48_thm =
    DT(((("CacheLib",18),
        [("CacheLib",[16]),
         ("arithmetic",
         [18,24,25,27,41,46,59,73,95,132,177,178,181,182,185,186,252,254,
          274,282]),
         ("bool",[8,25,31,35,42,51,52,53,55,57,62,95,100,103,104,123]),
         ("cache",[323]),("combin",[19]),("numeral",[0,3,5,7,8,9,32,33]),
         ("pair",[16]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("words",[150,268,608])]),["DISK_THM"]),
       [read"%83%64%85%42%82%56%176%195%28%193%58%75%139$0@%183$0@%185%146%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%145%207@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@||@|@@%212%97$2@$1@@$0@@|@|@|@"])
  fun op si_extract_thm x = x
    val op si_extract_thm =
    DT(((("CacheLib",19),
        [("arithmetic",[19,26,215,273]),
         ("bitstring",[20,39,53,71,101,102]),("blast",[9]),
         ("bool",[14,25,26,27,31,35,50,51,52,53,55,57,62,63,104,123]),
         ("cache",[320]),("combin",[8,11,15,16,19,33,35]),("fcp",[13,15]),
         ("list",[29,291]),("marker",[6]),
         ("numeral",[3,6,7,15,16,17,21,28]),("pred_set",[18,88]),
         ("rich_list",[18,282,345]),
         ("words",[5,58,228,300,665])]),["DISK_THM"]),
       [read"%83%64%85%42%82%56%170%51%174%15%174%49%134$2@%232%94$0@$1@@%94$1@%185%145%207@@@@$4@@|@%223%238%229%149%147%209$2@@@@%216%185%145%207@@@@@@@|@%94%222%153%148%209$1@@@@@%185%145%207@@@@|@%218%97$2@$1@@$0@@|@|@|@"])
  fun op word_log2_lt_adrSize x = x
    val op word_log2_lt_adrSize =
    DT(((("CacheLib",20),
        [("arithmetic",[19,41,46,59,71,73,95,125,178,185,222]),("bit",[2]),
         ("bool",[14,25,35,53,57,62,63,95,100,103,104]),
         ("fcp",[60,61,62,63]),("numeral",[0,3,4,5,7,8,12,15,16,17]),
         ("numeral_bit",[5,21,25,26,28,29]),
         ("words",[1,67,111,140,313])]),["DISK_THM"]),
       [read"%86%62%144%245%136$0@%216%129@@@@%130%223%238$0@@@%185%146%145%145%145%146%207@@@@@@@@|@"])
  fun op tag_extract_thm x = x
    val op tag_extract_thm =
    DT(((("CacheLib",21),
        [("arithmetic",[19,27,215,273]),
         ("bitstring",[20,39,53,71,101,102]),("blast",[9]),
         ("bool",[14,25,26,27,35,50,51,52,53,55,57,62,63,104,123]),
         ("cache",[321]),("combin",[8,11,15,16,19,33,35]),("fcp",[13,15]),
         ("list",[29,291]),("marker",[6]),
         ("numeral",[3,6,7,15,16,17,21,28]),("pred_set",[18,88]),
         ("rich_list",[18,282,345]),
         ("words",[5,58,228,300,665])]),["DISK_THM"]),
       [read"%83%64%85%42%82%56%170%60%174%47%174%16%174%55%134$3@%232%127$2@%185%145%207@@@@%94%94$1@$0@@%185%145%207@@@@$5@@|@%223%238%229%149%147%209$3@@@@%216%185%145%207@@@@@@@|@%94%222%153%148%209$2@@@@@%185%145%207@@@@|@%168%225$2@@@|@%219%97$2@$1@@$0@@|@|@|@"])
  fun op lineSpec_thm x = x
    val op lineSpec_thm =
    DT(((("CacheLib",22),
        [("CacheLib",[0,16,19,21]),
         ("arithmetic",
         [19,24,25,26,27,41,46,59,71,73,93,95,125,132,148,177,178,181,182,
          185,204,215,222,273,274,280,300,309,317]),
         ("bit",[0,2,5,7,21,42,55,123]),("bitstring",[53]),
         ("blast",[0,1,3,4,9]),
         ("bool",
         [14,25,26,27,29,31,35,42,50,51,52,53,55,57,62,63,92,95,100,103,
          104,123,128,146]),("cache",[323]),("combin",[8,19]),
         ("fcp",[13,15,60,61,62,63]),("list",[29,291]),("marker",[6]),
         ("numeral",[0,3,4,5,6,7,8,12,15,16,17,21,24,28]),
         ("numeral_bit",[5,21,22,23,24,25,26,27,28,29,32,33]),
         ("pair",[7,8,9,16]),("pred_set",[18,88]),("prim_rec",[4]),
         ("rich_list",[18,282,345]),("sat",[1,3,5,6,7,11,12,13,15,17,18]),
         ("words",
         [1,5,32,33,47,49,51,58,67,90,111,114,140,141,144,150,152,164,165,
          203,205,206,228,300,313,435,455,542,605,608,
          665])]),["DISK_THM"]),
       [read"%83%64%85%42%82%56%176%195%28%193%58%75%174%40%174%39%144%211@%134$6@%241%241%239$3@%94%94$1@$0@@%185%146%207@@@@@%239$4@%94$0@%185%146%207@@@@@@%239%214$2@@%185%146%207@@@@@@|@%222%153%148%209$4@@@@@|@%223%238%229%149%147%209$3@@@@%216%185%145%207@@@@@@@||@|@@%212%97$2@$1@@$0@@|@|@|@"])
  fun op fill_dcEQpm_thm x = x
    val op fill_dcEQpm_thm =
    DT(((("CacheLib",23),
        [("CacheLib",[0,15,22]),("arithmetic",[19,26,27,71,125,203]),
         ("bit",[2]),
         ("bool",[8,14,25,26,27,31,52,55,57,62,63,104,123,128,146,168]),
         ("cache",[236,237,239,242,337,338]),("combin",[7,12,19,21]),
         ("fcp",[60,61,62,63]),("marker",[6]),
         ("numeral",[0,3,5,7,12,15,16,17]),
         ("numeral_bit",[5,21,25,26,28,29]),("option",[6,7]),
         ("pair",[7,8,9,16]),("words",[1,111,203,205,206])]),["DISK_THM"]),
       [read"%83%64%85%42%89%45%88%25%82%56%178%197%26%46%176%195%28%193%58%75%144%131%127%161%185%146%207@@@%222%153%148%209$5@@@@@@%185%145%207@@@@%210%220@@@%144%211@%144%131$0@%127%161%185%146%207@@@%222%153%148%209$5@@@@@@%185%145%207@@@@@%133%159%106$2@%111$1@%123$0@$4@@@@@%221%217%102$8@$3@@@@@@@||@|@@%212%97$6@$5@@$2@@||@@%163%99$4@%109$3@%119$2@$1@@@@$0@@|@|@|@|@|@"])
  fun op shift_add_thm x = x
    val op shift_add_thm =
    DT(((("CacheLib",24),
        [("arithmetic",[26]),("bool",[25,35,55,57]),
         ("words",[206,394,426])]),["DISK_THM"]),
       [read"%85%72%85%73%91%37%91%34%134%241%239$3@%94$1@$0@@@%239$2@$0@@@%239%241%239$3@$1@@$2@@$0@@|@|@|@|@"])
  fun op writeback_mem_eq_thm x = x
    val op writeback_mem_eq_thm =
    DT(((("CacheLib",25),
        [("CacheLib",[0,5,22]),
         ("arithmetic",
         [19,24,25,26,27,41,46,59,73,95,177,178,182,185,204,215,220,273,
          274]),("bitstring",[71]),("blast",[0,1,3,4,9]),
         ("bool",
         [8,14,25,26,27,29,31,35,42,50,51,52,53,55,57,62,63,92,95,100,103,
          104,123,128,146]),("cache",[319,324]),("combin",[7,19]),
         ("fcp",[13,15]),("list",[29,291]),("marker",[6]),
         ("numeral",[0,3,5,6,7,8,15,16,17,21,28]),("pair",[7,16]),
         ("pred_set",[18,88]),("rich_list",[18,282,345]),
         ("sat",[1,3,5,6,7,11,12,13,15,17,18,23]),
         ("words",
         [5,32,58,69,143,203,205,206,228,300,321,322,324,326,340,353,384,
          394,426,665,668])]),["DISK_THM"]),
       [read"%85%42%83%64%89%45%81%53%82%56%85%29%85%59%91%76%176%195%28%193%58%75%171%46%174%40%174%39%144%245%134%239%241%239$7@$1@@$8@@%94$0@%185%146%207@@@@@%239%241%239$4@$1@@$5@@%94$0@%185%146%207@@@@@@@%144%211@%133%221%217%102$13@$11@@@@%221%217%102$13@$2@@@@@@|@%222%153%148%209$8@@@@@|@%223%238%229%149%147%209$7@@@@%216%185%145%207@@@@@@@|@%204%107$5@%112$4@%125$3@%117$8@$7@@@@@$6@@||@|@@%212%97$6@$7@@$3@@|@|@|@|@|@|@|@|@"])
  fun op lineSpec_eq_thm x = x
    val op lineSpec_eq_thm =
    DT(((("CacheLib",26),
        [("CacheLib",[0]),("arithmetic",[26,27]),("bitstring",[53]),
         ("bool",[14,25,31,50,53,55,57,63]),("cache",[320,321,322,323]),
         ("combin",[19]),("numeral",[3,5,7,15,16]),("pair",[4]),
         ("words",[149,205,206,665])]),["DISK_THM"]),
       [read"%82%48%82%50%85%42%83%64%144%211@%142%212%97$0@$1@@$3@@%212%97$0@$1@@$2@@@|@|@|@|@"])
  fun op writebackline_mem_eq_thm x = x
    val op writebackline_mem_eq_thm =
    DT(((("CacheLib",27),
        [("CacheLib",[0,25,26]),
         ("arithmetic",
         [19,22,25,26,27,41,46,59,63,71,73,95,125,178,181,182,185]),
         ("arm_step",[30]),("bit",[2]),
         ("bool",
         [2,8,14,25,26,27,29,31,35,50,51,52,53,55,57,62,63,95,98,99,100,
          103,104,123,128,146]),("cache",[324,325]),
         ("combin",[1,3,5,7,19,20]),("fcp",[60,61,62,63]),("list",[23,28]),
         ("marker",[6]),("num",[9]),("numeral",[0,3,5,7,8,12,15,16,17]),
         ("numeral_bit",[5,21,25,26,28,29]),("pair",[7,8,9,16]),
         ("rich_list",[18,19,58,288,345]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("words",[1,111,192,200,203,205,206,394,407,426])]),["DISK_THM"]),
       [read"%85%29%85%59%89%45%88%25%91%37%83%64%85%42%82%56%176%195%28%193%58%75%178%197%26%46%174%40%174%39%144%245%134%239%241%239$13@$1@@$14@@%94$0@%185%146%207@@@@@%239%241%239$5@$1@@$6@@%94$0@%185%146%207@@@@@@@%144%131$10@%210%220@@@%144%211@%133%221%217%102$8@$12@@@@%221%217%102$8@$2@@@@@@@|@%222%153%148%209$6@@@@@|@%223%238%229%149%147%209$5@@@@%216%185%145%207@@@@@@@||@@%205%105$10@%110$9@%120$8@%116$7@$6@@@@@$3@@||@|@@%212%97$2@$1@@$0@@|@|@|@|@|@|@|@|@"])
  fun op fill_pm'EQpm_diffIn_thm x = x
    val op fill_pm'EQpm_diffIn_thm =
    DT(((("CacheLib",28),
        [("CacheLib",[0,27]),
         ("arithmetic",
         [19,24,25,26,27,41,46,59,71,73,95,125,177,178,181,182,185,203,204,
          254,274,282]),("bit",[2]),
         ("bool",
         [8,14,25,26,27,29,31,35,42,50,51,52,53,55,57,62,63,92,95,100,103,
          104,123]),("cache",[331,337]),("combin",[19]),
         ("fcp",[60,61,62,63]),("marker",[6]),
         ("numeral",[0,3,5,7,8,9,12,15,16,17,32,33]),
         ("numeral_bit",[5,21,25,26,28,29]),("option",[6,7,10]),
         ("pair",[7,8,9,16]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("words",
         [1,111,150,205,206,394,426,608])]),["DISK_THM", "cheat"]),
       [read"%83%64%85%42%89%45%88%25%83%65%85%43%82%56%178%197%26%46%144%211@%144%245%164%98$4@%101$3@$5@@@$2@@@%133%221%217%102$3@$0@@@@%221%217%102$3@$6@@@@@@||@@%163%99$6@%109$5@%119$4@$3@@@@$0@@|@|@|@|@|@|@|@"])
  fun op CacheClean_dcEQpm'_thm x = x
    val op CacheClean_dcEQpm'_thm =
    DT(((("CacheLib",29),
        [("CacheLib",[0,12,17,22]),
         ("arithmetic",
         [19,24,25,26,27,41,46,59,71,73,95,125,177,178,181,182,185,203,204,
          254,274,282]),("bit",[2]),
         ("bool",
         [8,14,25,31,35,42,50,51,52,53,54,55,57,62,63,92,95,99,100,103,104,
          123,128,146]),("cache",[336]),("combin",[19]),
         ("fcp",[60,61,62,63]),("marker",[6]),
         ("numeral",[0,3,5,7,8,9,12,15,16,17,32,33]),
         ("numeral_bit",[5,21,25,26,28,29]),("pair",[7,8,9,16]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("words",
         [1,111,150,203,205,206,394,426,608])]),["DISK_THM", "cheat"]),
       [read"%83%64%85%42%89%45%88%25%83%65%85%43%82%56%178%197%26%46%176%195%29%193%59%76%176%195%28%193%58%75%174%40%174%39%144%164%98$16@%101$15@$13@@@$10@@%144%211@%144%181%104$7@%101$6@$13@@@@%144%134%239%241%239$6@$1@@$7@@%94$0@%185%146%207@@@@@%239%241%239$3@$1@@$4@@%94$0@%185%146%207@@@@@@%133%159%106$7@%111$6@%123$5@$13@@@@@%221%217%102$11@$8@@@@@@@@|@%222%153%148%209$9@@@@@|@%223%238%229%149%147%209$8@@@@%216%185%145%207@@@@@@@||@|@@%212%97$11@$10@@$5@@||@|@@%212%97$4@$3@@$2@@||@@%154%99$6@%109$5@%119$4@$3@@@@$0@@|@|@|@|@|@|@|@"])
  fun op CacheClean_dcEQdc'_thm x = x
    val op CacheClean_dcEQdc'_thm =
    DT(((("CacheLib",30),
        [("CacheLib",[0,11,17]),
         ("arithmetic",
         [19,22,24,25,26,27,41,46,59,63,71,73,95,125,177,178,181,182,185,
          203,204,254,274,282]),("arm_step",[30]),("bit",[2]),
         ("bool",
         [8,14,25,26,27,29,31,35,42,50,51,52,53,54,55,57,62,63,92,95,99,
          100,103,104,123,128,146]),("cache",[183,236,325,336,338]),
         ("combin",[7,8,11,12,15,16,19,33,35]),("fcp",[60,61,62,63]),
         ("list",[23,28]),("marker",[6,9]),("num",[9]),
         ("numeral",[0,3,5,7,8,9,12,15,16,17,32,33]),
         ("numeral_bit",[5,21,25,26,28,29]),("option",[10,16]),
         ("pair",[4,7,8,9,16,45,46]),("rich_list",[18,19,58,288,345]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("words",
         [1,111,150,203,205,206,394,426,608])]),["DISK_THM", "cheat"]),
       [read"%83%64%85%42%89%45%88%25%83%65%85%43%82%56%178%197%26%46%176%195%29%193%59%76%176%195%28%193%58%75%174%40%174%39%144%211@%144%134%239%241%239$6@$1@@$7@@%94$0@%185%146%207@@@@@%239%241%239$3@$1@@$4@@%94$0@%185%146%207@@@@@@%133%159%106$7@%111$6@%123$5@$13@@@@@%159%106$7@%111$6@%123$5@$9@@@@@@@|@%222%153%148%209$9@@@@@|@%223%238%229%149%147%209$8@@@@%216%185%145%207@@@@@@@||@|@@%212%97$11@$10@@$5@@||@|@@%212%97$4@$3@@$2@@||@@%154%99$6@%109$5@%119$4@$3@@@@$0@@|@|@|@|@|@|@|@"])
  fun op CacheClean_dcEQdc'_diffMsb_thm x = x
    val op CacheClean_dcEQdc'_diffMsb_thm =
    DT(((("CacheLib",31),
        [("arithmetic",
         [19,22,25,26,27,41,46,59,63,71,73,95,125,178,181,182,185,203,254,
          282]),("arm_step",[30]),("bit",[2]),
         ("bool",
         [8,14,25,26,27,29,31,35,50,51,52,53,55,57,62,63,95,100,103,104,
          123,128,146]),("cache",[236,325,331,336,338]),
         ("combin",[7,12,19]),("fcp",[60,61,62,63]),("list",[23,28]),
         ("marker",[6]),("num",[9]),
         ("numeral",[0,3,5,7,8,9,12,15,16,17,32,33]),
         ("numeral_bit",[5,21,25,26,28,29]),("pair",[7,8,9,16]),
         ("rich_list",[18,19,58,288,345]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("words",[1,111,150,203,206,394,426,608])]),["DISK_THM"]),
       [read"%83%64%85%42%89%45%88%25%83%65%85%43%82%56%178%197%26%46%176%195%29%193%59%76%176%195%28%193%58%75%174%40%174%39%144%211@%144%245%134%239%241%239$6@$1@@$7@@%94$0@%185%146%207@@@@@%239%241%239$3@$1@@$4@@%94$0@%185%146%207@@@@@@@%133%159%106$7@%111$6@%123$5@$13@@@@@%159%106$7@%111$6@%123$5@$9@@@@@@@|@%222%153%148%209$9@@@@@|@%223%238%229%149%147%209$8@@@@%216%185%145%207@@@@@@@||@|@@%212%97$11@$10@@$5@@||@|@@%212%97$4@$3@@$2@@||@@%154%99$6@%109$5@%119$4@$3@@@@$0@@|@|@|@|@|@|@|@"])
  fun op CacheClean_hitDc'_diffAddr_thm x = x
    val op CacheClean_hitDc'_diffAddr_thm =
    DT(((("CacheLib",32),
        [("arithmetic",
         [19,22,25,26,27,41,46,59,63,71,73,95,125,178,181,182,185,203,254,
          282]),("arm_step",[30]),("bit",[2]),
         ("bool",
         [8,14,25,26,27,29,31,35,50,51,52,53,55,57,62,63,95,100,103,104,
          123,128,146]),("cache",[236,325,331,336]),("combin",[7,12,19]),
         ("fcp",[60,61,62,63]),("list",[23,28]),("marker",[6]),("num",[9]),
         ("numeral",[0,3,5,7,8,9,12,15,16,17,32,33]),
         ("numeral_bit",[5,21,25,26,28,29]),("pair",[7,8,9,16]),
         ("rich_list",[18,19,58,288,345]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("words",[1,111,150,203,206,394,426,608])]),["DISK_THM"]),
       [read"%83%64%85%42%89%45%88%25%83%65%85%43%82%56%176%195%28%193%58%75%176%195%29%193%59%76%174%40%174%39%178%197%26%46%144%245%134%239%241%239$5@$3@@$6@@%94$2@%185%146%207@@@@@%239%241%239$8@$3@@$9@@%94$2@%185%146%207@@@@@@@%144%164%98$16@%101$15@$13@@@$10@@%144%164%98$12@%101$11@$13@@@$10@@%164%98$12@%101$11@$1@@@$10@@@@||@@%154%99$14@%109$13@%119$12@$11@@@@$8@@|@%222%153%148%209$7@@@@@|@%223%238%229%149%147%209$6@@@@%216%185%145%207@@@@@@@||@|@@%212%97$5@$4@@$3@@||@|@@%212%97$6@$5@@$0@@|@|@|@|@|@|@|@"])
  fun op CacheClean_keepMiss_diffMsb_thm x = x
    val op CacheClean_keepMiss_diffMsb_thm =
    DT(((("CacheLib",33),
        [("arithmetic",
         [19,22,25,26,27,41,46,59,63,71,73,95,125,178,181,182,185,203,254,
          282]),("arm_step",[30]),("bit",[2]),
         ("bool",
         [8,14,25,26,27,29,31,35,50,51,52,53,55,57,62,63,95,100,103,104,
          123,128,146]),("cache",[236,325,331,336]),("combin",[7,12,19]),
         ("fcp",[60,61,62,63]),("list",[23,28]),("marker",[6]),("num",[9]),
         ("numeral",[0,3,5,7,8,9,12,15,16,17,32,33]),
         ("numeral_bit",[5,21,25,26,28,29]),("option",[14,22]),
         ("pair",[7,8,9,16]),("rich_list",[18,19,58,288,345]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("words",[1,111,150,203,206,394,426,608])]),["DISK_THM"]),
       [read"%83%64%85%42%89%45%88%25%83%65%85%43%82%56%176%195%28%193%58%75%176%195%29%193%59%76%174%40%174%39%178%197%26%46%144%245%134%239%241%239$5@$3@@$6@@%94$2@%185%146%207@@@@@%239%241%239$8@$3@@$9@@%94$2@%185%146%207@@@@@@@%144%164%98$16@%101$15@$13@@@$10@@%144%245%164%98$12@%101$11@$13@@@$10@@@%245%164%98$12@%101$11@$1@@@$10@@@@@||@@%154%99$14@%109$13@%119$12@$11@@@@$8@@|@%222%153%148%209$7@@@@@|@%223%238%229%149%147%209$6@@@@%216%185%145%207@@@@@@@||@|@@%212%97$5@$4@@$3@@||@|@@%212%97$6@$5@@$0@@|@|@|@|@|@|@|@"])
  fun op CacheInvalidate_dcEQpm'_thm x = x
    val op CacheInvalidate_dcEQpm'_thm =
    DT(((("CacheLib",34),
        [("CacheLib",[0,12,17,22]),
         ("arithmetic",
         [19,24,25,26,27,41,46,59,71,73,95,125,177,178,181,182,185,203,204,
          254,274,282]),("bit",[2]),
         ("bool",
         [8,14,25,31,35,42,50,51,52,53,54,55,57,62,63,92,95,99,100,103,104,
          123,128,146]),("cache",[335]),("combin",[19]),
         ("fcp",[60,61,62,63]),("marker",[6]),
         ("numeral",[0,3,5,7,8,9,12,15,16,17,32,33]),
         ("numeral_bit",[5,21,25,26,28,29]),("pair",[7,8,9,16]),
         ("sat",[1,3,5,6,7,11,12,13,14,15,17,18,19,20,23]),
         ("words",
         [1,111,150,203,205,206,394,426,608])]),["DISK_THM", "cheat"]),
       [read"%83%64%85%42%89%45%88%25%83%65%85%43%82%56%178%197%26%46%176%195%28%193%58%75%176%195%29%193%59%76%174%40%174%39%144%164%98$16@%101$15@$13@@@$10@@%144%211@%144%181%104$4@%101$3@$13@@@@%144%134%239%241%239$3@$1@@$4@@%94$0@%185%146%207@@@@@%239%241%239$6@$1@@$7@@%94$0@%185%146%207@@@@@@%133%159%106$4@%111$3@%123$2@$13@@@@@%221%217%102$11@$8@@@@@@@@|@%222%153%148%209$9@@@@@|@%223%238%229%149%147%209$8@@@@%216%185%145%207@@@@@@@||@|@@%212%97$7@$6@@$5@@||@|@@%212%97$8@$7@@$2@@||@@%155%99$6@%109$5@%119$4@$3@@@@$0@@|@|@|@|@|@|@|@"])
  fun op CacheInvalidate_missDc'_thm x = x
    val op CacheInvalidate_missDc'_thm =
    DT(((("CacheLib",35),
        [("bool",[25,26,27,31,52,55,57,62,104,123,128,146]),
         ("cache",[236,242,328,331,335]),("combin",[7,12,19]),
         ("option",[22]),("pair",[7,8,16])]),["DISK_THM"]),
       [read"%83%64%85%42%89%45%88%25%82%56%178%197%26%46%144%164%98$6@%101$5@$3@@@$2@@%245%164%98$6@%101$5@$1@@@$2@@@||@@%155%99$4@%109$3@%119$2@$1@@@@$0@@|@|@|@|@|@"])
  fun op CacheInvalidate_hitDc'_diffAddr_thm x = x
    val op CacheInvalidate_hitDc'_diffAddr_thm =
    DT(((("CacheLib",36),
        [("arithmetic",[22,25,26,27,46,63,73,95,178,181,182,185]),
         ("arm_step",[30]),
         ("bool",
         [14,25,26,27,29,31,35,51,52,53,55,57,62,63,103,104,123,128,146]),
         ("cache",[236,242,325,328,331,335]),("combin",[7,12,19]),
         ("list",[23,28]),("marker",[6]),("num",[9]),
         ("numeral",[3,5,7,8,16]),("pair",[7,8,9,16]),
         ("rich_list",[18,19,58,288,345]),("state_transformer",[9]),
         ("words",[203,206,394,426])]),["DISK_THM"]),
       [read"%83%64%85%42%89%45%88%25%83%65%85%43%82%56%176%195%28%193%58%75%176%195%29%193%59%76%174%40%174%39%178%197%26%46%144%245%134%239%241%239$5@$3@@$6@@%94$2@%185%146%207@@@@@%239%241%239$8@$3@@$9@@%94$2@%185%146%207@@@@@@@%144%164%98$16@%101$15@$13@@@$10@@%144%164%98$12@%101$11@$13@@@$10@@%164%98$12@%101$11@$1@@@$10@@@@||@@%155%99$14@%109$13@%119$12@$11@@@@$8@@|@%222%153%148%209$7@@@@@|@%223%238%229%149%147%209$6@@@@%216%185%145%207@@@@@@@||@|@@%212%97$5@$4@@$3@@||@|@@%212%97$6@$5@@$0@@|@|@|@|@|@|@|@"])
  fun op CacheInvalidate_dcEQdc'_diffAddr_thm x = x
    val op CacheInvalidate_dcEQdc'_diffAddr_thm =
    DT(((("CacheLib",37),
        [("arithmetic",[22,25,26,27,46,63,73,95,178,181,182,185]),
         ("arm_step",[30]),
         ("bool",
         [14,25,26,27,29,31,35,51,52,53,55,57,62,63,103,104,123,128,146]),
         ("cache",[236,242,325,328,331,335,338]),("combin",[7,12,19]),
         ("list",[23,28]),("marker",[6]),("num",[9]),
         ("numeral",[3,5,7,8,16]),("pair",[7,8,9,16]),
         ("rich_list",[18,19,58,288,345]),("state_transformer",[9]),
         ("words",[203,206,394,426])]),["DISK_THM"]),
       [read"%83%64%85%42%89%45%88%25%83%65%85%43%82%56%176%195%28%193%58%75%176%195%29%193%59%76%174%40%174%39%178%197%26%46%144%245%134%239%241%239$5@$3@@$6@@%94$2@%185%146%207@@@@@%239%241%239$8@$3@@$9@@%94$2@%185%146%207@@@@@@@%144%164%98$16@%101$15@$13@@@$10@@%144%164%98$12@%101$11@$13@@@$10@@%133%159%106$6@%111$5@%123$4@$13@@@@@%159%106$6@%111$5@%123$4@$1@@@@@@@@||@@%155%99$14@%109$13@%119$12@$11@@@@$8@@|@%222%153%148%209$7@@@@@|@%223%238%229%149%147%209$6@@@@%216%185%145%207@@@@@@@||@|@@%212%97$5@$4@@$3@@||@|@@%212%97$6@$5@@$0@@|@|@|@|@|@|@|@"])
  fun op CacheInvalidate_keepMiss_diffMsb_thm x = x
    val op CacheInvalidate_keepMiss_diffMsb_thm =
    DT(((("CacheLib",38),
        [("arithmetic",[22,25,26,27,46,63,73,95,178,181,182,185]),
         ("arm_step",[30]),
         ("bool",
         [14,25,26,27,29,31,35,51,52,53,55,57,62,63,103,104,123,128,146]),
         ("cache",[236,242,325,328,331,335]),("combin",[7,12,19]),
         ("list",[23,28]),("marker",[6]),("num",[9]),
         ("numeral",[3,5,7,8,16]),("option",[22,28]),("pair",[7,8,9,16]),
         ("rich_list",[18,19,58,288,345]),("state_transformer",[9]),
         ("words",[203,206,394,426])]),["DISK_THM"]),
       [read"%83%64%85%42%89%45%88%25%83%65%85%43%82%56%176%195%28%193%58%75%176%195%29%193%59%76%174%40%174%39%178%197%26%46%144%245%134%239%241%239$5@$3@@$6@@%94$2@%185%146%207@@@@@%239%241%239$8@$3@@$9@@%94$2@%185%146%207@@@@@@@%144%164%98$16@%101$15@$13@@@$10@@%144%245%164%98$12@%101$11@$13@@@$10@@@%245%164%98$12@%101$11@$1@@@$10@@@@@||@@%155%99$14@%109$13@%119$12@$11@@@@$8@@|@%222%153%148%209$7@@@@@|@%223%238%229%149%147%209$6@@@@%216%185%145%207@@@@@@@||@|@@%212%97$5@$4@@$3@@||@|@@%212%97$6@$5@@$0@@|@|@|@|@|@|@|@"])
  fun op msbEqAdrs_Hit_dc_thm x = x
    val op msbEqAdrs_Hit_dc_thm =
    DT(((("CacheLib",40),
        [("CacheLib",[0,39]),
         ("arithmetic",
         [24,25,26,27,41,46,59,73,95,177,178,182,185,204,274]),
         ("bool",
         [8,25,31,35,42,50,51,52,53,55,57,62,92,95,100,103,104,123]),
         ("cache",[331]),("combin",[19]),("marker",[6]),
         ("numeral",[0,3,5,8]),("pair",[7,16]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("words",[205,206,394,426])]),["DISK_THM", "cheat"]),
       [read"%83%64%85%42%88%25%83%65%85%43%82%56%144%211@%144%164%98$5@%101$4@$3@@@$0@@%144%134%213$5@$4@$0@@%213$2@$1@$0@@@%164%98$2@%101$1@$3@@@$0@@@@|@|@|@|@|@|@"])
  fun op cacheRead_miss_thm x = x
    val op cacheRead_miss_thm =
    DT(((("CacheLib",41),
        [("CacheLib",[0,17,23,28]),
         ("arithmetic",
         [19,25,26,27,41,46,59,71,73,95,125,177,178,181,182,185,203,254,
          274,282]),("bit",[2]),("bitstring",[71]),
         ("bool",
         [8,14,25,26,27,29,31,35,42,50,51,52,53,55,57,62,63,92,95,100,103,
          104,123]),("cache",[338,339]),("combin",[19]),
         ("fcp",[60,61,62,63]),("marker",[6]),
         ("numeral",[0,3,5,7,8,9,12,15,16,17,32,33]),
         ("numeral_bit",[5,21,25,26,28,29]),("pair",[7,9,16]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("words",[1,111,150,205,206,608])]),["DISK_THM", "cheat"]),
       [read"%83%64%85%42%89%45%88%25%82%56%179%198%26%199%46%68%176%195%28%193%58%75%169%71%144%211@%144%245%164%98$11@%101$10@$8@@@$7@@@%133$0@%221$4@@@@|@%221%217%102$9@$8@@@@||@|@@%212%97$7@$6@@$3@@||@|@@%156%99$4@%109$3@%119$2@$1@@@@$0@@|@|@|@|@|@"])
  fun op cacheRead_hit_thm x = x
    val op cacheRead_hit_thm =
    DT(((("CacheLib",42),
        [("bitstring",[71]),
         ("bool",[25,26,27,29,31,52,55,57,62,63,104,123,128,146]),
         ("cache",[186,189,327,338,339]),("combin",[7,19]),("option",[14]),
         ("pair",[7,8,9,16])]),["DISK_THM"]),
       [read"%83%64%85%42%89%45%88%25%82%56%179%198%26%199%46%68%176%195%28%193%58%75%169%69%144%164%98$11@%101$10@$8@@@$7@@%133$0@%221$4@@@|@%159%106$2@%111$1@%123$0@$7@@@@@||@|@@%212%97$7@$6@@$3@@||@|@@%156%99$4@%109$3@%119$2@$1@@@@$0@@|@|@|@|@|@"])
  fun op cacheWrite_setCell_thm x = x
    val op cacheWrite_setCell_thm =
    DT(((("CacheLib",43),
        [("bool",[25,26,27,29,31,55,57,62,63,104,128,146]),
         ("cache",[183,186,189,236,242,327,340]),("combin",[7,12,19]),
         ("option",[14,16]),("pair",[7,8,9,16]),
         ("words",[144])]),["DISK_THM"]),
       [read"%83%64%85%42%93%23%89%45%88%25%82%56%178%197%26%46%176%195%28%193%58%75%128%132%186%191%151$4$2@@$1@@@@%242$8@@@%133%188%191%151$4$2@@$1@@@%214$0@@@%243$8@@@||@|@@%212%97$7@$6@@$2@@||@@%157%100$5@%113$4@%126$3@%119$2@$1@@@@@$0@@|@|@|@|@|@|@"])
  fun op linefill_hit_t x = x
    val op linefill_hit_t =
    DT(((("CacheLib",44),
        [("arithmetic",[22,25,26,27,46,63,73,95,178,181,185]),
         ("arm_step",[30]),
         ("bool",[14,25,27,31,35,53,55,57,62,63,103,104,123,128,146]),
         ("cache",[186,189,330]),("combin",[7,8,11,15,16,19,33,35]),
         ("list",[28]),("marker",[6,9]),("num",[9]),("numeral",[3,7,8,16]),
         ("option",[14]),("pair",[4,8,9,45,46]),("rich_list",[18,19,345]),
         ("words",[203,206])]),["DISK_THM"]),
       [read"%90%27%85%28%85%58%89%45%88%25%82%56%91%37%180%200%52%7%174%54%174%32%91%75%170%42%165$5$10@@|@%241%239$9@%94%94$2@$1@@%185%146%207@@@@@%241%239$10@%94$1@%185%146%207@@@@@%239%214$0@@%185%146%207@@@@@@|@|@%222%153%148%209$4@@@@@|@%223%238%229%149%147%209$3@@@@%216%185%145%207@@@@@@@||@@%182%122$6@%105$5@%110$4@%120$3@%116$2@$0@@@@@@$1@@|@|@|@|@|@|@|@"])
  fun op fill_hit_thm x = x
    val op fill_hit_thm =
    DT(((("CacheLib",45),
        [("CacheLib",[44]),
         ("bool",[8,25,26,27,31,35,55,57,104,128,146,168]),
         ("cache",[236,237,239,242,331,337]),("combin",[7,12,19,21]),
         ("marker",[6]),("option",[6,7]),("pair",[7,8,16]),
         ("words",[203,206])]),["DISK_THM"]),
       [read"%83%64%85%42%89%45%88%25%82%56%178%197%26%46%176%195%28%193%58%75%164%98$9@%101$8@$4@@@$5@||@|@@%212%97$6@$5@@$2@@||@@%163%99$4@%109$3@%119$2@$1@@@@$0@@|@|@|@|@|@"])
  fun op cacheRead_paHitdc'_thm x = x
    val op cacheRead_paHitdc'_thm =
    DT(((("CacheLib",46),
        [("CacheLib",[45]),
         ("bool",[8,25,26,27,29,31,52,55,57,62,63,104,123,128,146]),
         ("cache",[186,189,236,327,331,339]),("combin",[7,19]),
         ("marker",[6]),("option",[14,22]),
         ("pair",[7,8,9,16])]),["DISK_THM"]),
       [read"%83%64%85%42%89%45%88%25%82%56%179%198%26%199%46%6%164%98$7@%101$6@$2@@@$3@||@|@@%156%99$4@%109$3@%119$2@$1@@@@$0@@|@|@|@|@|@"])
  fun op cacheWrite_paHitdc'_thm x = x
    val op cacheWrite_paHitdc'_thm =
    DT(((("CacheLib",47),
        [("bool",[25,26,27,29,31,50,55,57,62,63,104,128,146]),
         ("cache",[186,189,236,242,327,331,340]),("combin",[7,12,19]),
         ("option",[14,16]),("pair",[4,5,7,8,9,16])]),["DISK_THM"]),
       [read"%83%64%85%42%93%23%89%45%88%25%82%56%178%197%26%46%164%98$7@%101$6@$1@@@$2@||@@%157%100$5@%113$4@%126$3@%119$2@$1@@@@@$0@@|@|@|@|@|@|@"])
  fun op cacheWrite_paNOTCHGpm_thm x = x
    val op cacheWrite_paNOTCHGpm_thm =
    DT(((("CacheLib",48),
        [("CacheLib",[28]),
         ("bool",[8,25,26,27,29,31,52,55,57,62,63,104,123,128,146]),
         ("cache",[186,189,242,327,340]),("combin",[7,19]),
         ("option",[14,16]),("pair",[7,8,9,16])]),["DISK_THM", "cheat"]),
       [read"%83%64%85%42%93%23%89%45%88%25%82%56%178%197%26%46%144%211@%133%221%217%102$6@$4@@@@%221%217%102$6@$0@@@@@||@@%157%100$5@%113$4@%126$3@%119$2@$1@@@@@$0@@|@|@|@|@|@|@"])
  fun op cacheWrite_read_thm x = x
    val op cacheWrite_read_thm =
    DT(((("CacheLib",49),
        [("CacheLib",[43,47]),("bitstring",[71]),
         ("bool",[8,25,26,27,29,31,53,55,57,62,63,104,128,146]),
         ("cache",[186,189,327,339]),("combin",[7,19]),("option",[14]),
         ("pair",[7,8,9,16])]),["DISK_THM"]),
       [read"%83%64%85%42%93%23%89%45%88%25%82%56%178%197%26%46%179%198%9%199%14%67%133%221$0@@%243$8@@||@|@@%156%99$7@%109$6@%119$0@$1@@@@$2@@||@@%157%100$5@%113$4@%126$3@%119$2@$1@@@@@$0@@|@|@|@|@|@|@"])
  fun op CacheRead_lfoldEQval_SameAddress_thm x = x
    val op CacheRead_lfoldEQval_SameAddress_thm =
    DT(((("CacheLib",50),
        [("CacheLib",[46]),
         ("bool",[8,25,26,27,29,31,53,55,57,62,63,104,128,146]),
         ("cache",[186,189,236,327,339]),("combin",[7,19]),("list",[20]),
         ("option",[14]),("pair",[7,8,9,16])]),["DISK_THM"]),
       [read"%83%64%85%42%89%45%88%25%82%56%179%198%26%199%46%68%179%198%4%199%5%70%138$3@$0@||@|@@%156%99$7@%109$6@%119$1@$2@@@@$3@@||@|@@%156%99$4@%109$3@%119$2@$1@@@@$0@@|@|@|@|@|@"])
  fun op Fill_someEPevict_dcEQpm'_thm x = x
    val op Fill_someEPevict_dcEQpm'_thm =
    DT(((("CacheLib",51),
        [("CacheLib",[0,12,17,22]),
         ("arithmetic",
         [19,25,26,27,41,46,59,71,73,95,125,177,178,181,182,185,203,254,
          274,282]),("bit",[2]),("bitstring",[71]),
         ("bool",
         [8,14,25,26,27,31,35,42,50,51,52,53,55,57,62,63,92,95,100,103,104,
          123,128,146]),("cache",[236,237,239,242,319,337,338]),
         ("combin",[7,8,11,12,15,16,19,21,35]),("fcp",[60,61,62,63]),
         ("marker",[6,9]),("numeral",[0,3,5,7,8,9,12,15,16,17,32,33]),
         ("numeral_bit",[5,21,25,26,28,29]),("option",[7,10,16]),
         ("pair",[4,5,7,8,9,16,45,46]),("sat",[1,3,5,6,7,11,12,13,15]),
         ("words",
         [1,111,150,203,205,206,321,608])]),["DISK_THM", "cheat"]),
       [read"%83%64%85%42%83%65%85%43%89%45%88%25%85%77%82%56%178%197%26%46%176%195%28%193%58%75%176%195%29%193%59%76%174%39%144%181%104$3@%101$2@$11@@@@%144%128%245%134$15@$13@@@%134$3@$6@@@%144%211@%144%134$2@%192%190$10@@@@%144%141%160%121%150$11$6@@@%101$5@$11@@@@%190$10@@@%133%159%106$3@%111$2@%123$1@$11@@@@@%221%217%102$13@$7@@@@@@@@@|@%222%153%148%209$8@@@@@||@|@@%212%97$10@$9@@$5@@||@|@@%212%97$9@$8@@$2@@||@@%163%99$7@%109$6@%119$3@$2@@@@$0@@|@|@|@|@|@|@|@|@"])
  fun op CacheWrite_DiffPa_EqReadMemPa'_thm x = x
    val op CacheWrite_DiffPa_EqReadMemPa'_thm =
    DT(((("CacheLib",53),
        [("CacheLib",[28]),
         ("bool",[8,25,26,27,29,31,52,53,55,57,62,63,104,123,128,146]),
         ("cache",[186,189,242,327,340]),("combin",[7,19]),
         ("option",[14,16]),("pair",[7,8,9,16])]),["DISK_THM", "cheat"]),
       [read"%83%64%85%42%93%23%89%45%88%25%83%65%85%43%82%56%178%197%26%46%176%195%28%193%58%75%176%195%29%193%59%76%144%245%134$14@$9@@@%144%211@%144%245%164%98$10@%101$9@$11@@@$8@@@%144%245%164%98$10@%101$9@$7@@@$8@@@%133%221%217%102$9@$12@@@@%221%217%102$9@$6@@@@@@@@||@|@@%212%97$7@$6@@$5@@||@|@@%212%97$9@$8@@$2@@||@@%157%100$7@%113$6@%126$5@%119$4@$3@@@@@$0@@|@|@|@|@|@|@|@|@"])
  fun op CacheWrite_DiffPa_EqReadMemPa'_thm3 x = x
    val op CacheWrite_DiffPa_EqReadMemPa'_thm3 =
    DT(((("CacheLib",54),
        [("CacheLib",[28]),
         ("bool",[8,25,26,27,29,31,52,53,55,57,62,63,104,123,128,146]),
         ("cache",[186,189,242,327,340]),("combin",[7,19]),
         ("option",[14,16]),("pair",[7,8,9,16])]),["DISK_THM", "cheat"]),
       [read"%83%64%85%42%93%23%89%45%88%25%83%65%85%43%82%56%178%197%26%46%176%195%28%193%58%75%176%195%29%193%59%76%144%245%134$14@$9@@@%144%211@%144%245%164%98$10@%101$9@$11@@@$8@@@%144%164%98$10@%101$9@$7@@@$8@@%133%221%217%102$9@$12@@@@%221%217%102$9@$6@@@@@@@@||@|@@%212%97$7@$6@@$5@@||@|@@%212%97$9@$8@@$2@@||@@%157%100$7@%113$6@%126$5@%119$4@$3@@@@@$0@@|@|@|@|@|@|@|@|@"])
  fun op Miss_After_Evict_th x = x
    val op Miss_After_Evict_th =
    DT(((("CacheLib",55),
        [("CacheLib",[0]),
         ("arithmetic",
         [19,22,25,26,27,41,46,59,63,71,73,95,125,178,181,182,185,203,254,
          282]),("arm_step",[30]),("bit",[2]),
         ("bool",
         [14,25,26,27,29,31,35,51,52,53,55,57,62,63,95,100,103,104,123,128,
          146]),("cache",[186,189,236,237,239,242,328,329,330,331,337]),
         ("combin",[7,12,19,21]),("fcp",[60,61,62,63]),("list",[23,28]),
         ("marker",[6]),("num",[9]),
         ("numeral",[0,3,5,7,8,9,12,15,16,17,32,33]),
         ("numeral_bit",[5,21,25,26,28,29]),("option",[7,10,11,14,22]),
         ("pair",[7,8,9,16]),("rich_list",[18,19,58,288,345]),
         ("sat",[1,3,5,6,7,11,12,13,15]),
         ("words",[1,111,150,203,205,206,608])]),["DISK_THM"]),
       [read"%83%64%85%42%89%45%88%25%85%59%82%56%176%195%28%193%58%75%178%197%26%46%144%141%160%121%150$7$4@@@%101$3@$7@@@@%190$6@@@%144%245%164%98$10@%101$9@$7@@@$5@@@%144%211@%140%151$1$4@@$6@@%184@@@@||@@%163%99$8@%109$7@%119$6@$5@@@@$3@@||@|@@%212%97$5@$4@@$0@@|@|@|@|@|@|@"])
  end
  val _ = DB.bindl "CacheLib"
  [("dirty_axiom",dirty_axiom,DB.Axm),
   ("eviction_policy_axiom",eviction_policy_axiom,DB.Axm),
   ("invariant_cache_def",invariant_cache_def,DB.Def),
   ("write_mem32_def",write_mem32_def,DB.Def),
   ("WriteBackLine_simp_def",WriteBackLine_simp_def,DB.Def),
   ("msb_extract_def",msb_extract_def,DB.Def),
   ("lt_mod_thm",lt_mod_thm,DB.Thm), ("adr_neq3_thm",adr_neq3_thm,DB.Thm),
   ("adr_neq2_thm",adr_neq2_thm,DB.Thm),
   ("adr_neq_thm",adr_neq_thm,DB.Thm),
   ("write_read_thm",write_read_thm,DB.Thm),
   ("write_read_unch_thm",write_read_unch_thm,DB.Thm),
   ("wrtBck_dirty_thm",wrtBck_dirty_thm,DB.Thm),
   ("wrtBck_memory_thm",wrtBck_memory_thm,DB.Thm),
   ("wrtBckLine_dcEQpm'_thm",wrtBckLine_dcEQpm'_thm,DB.Thm),
   ("wrtBckLine_pmEQpm'IfNotDirty_thm",
    wrtBckLine_pmEQpm'IfNotDirty_thm,
    DB.Thm), ("cellFill_memeq_thm",cellFill_memeq_thm,DB.Thm),
   ("linefill_memeq_t",linefill_memeq_t,DB.Thm),
   ("wIdx_extract_thm",wIdx_extract_thm,DB.Thm),
   ("wi_lt_line_size_thm",wi_lt_line_size_thm,DB.Thm),
   ("wIdx_lt_dimword48_thm",wIdx_lt_dimword48_thm,DB.Thm),
   ("si_extract_thm",si_extract_thm,DB.Thm),
   ("word_log2_lt_adrSize",word_log2_lt_adrSize,DB.Thm),
   ("tag_extract_thm",tag_extract_thm,DB.Thm),
   ("lineSpec_thm",lineSpec_thm,DB.Thm),
   ("fill_dcEQpm_thm",fill_dcEQpm_thm,DB.Thm),
   ("shift_add_thm",shift_add_thm,DB.Thm),
   ("writeback_mem_eq_thm",writeback_mem_eq_thm,DB.Thm),
   ("lineSpec_eq_thm",lineSpec_eq_thm,DB.Thm),
   ("writebackline_mem_eq_thm",writebackline_mem_eq_thm,DB.Thm),
   ("fill_pm'EQpm_diffIn_thm",fill_pm'EQpm_diffIn_thm,DB.Thm),
   ("CacheClean_dcEQpm'_thm",CacheClean_dcEQpm'_thm,DB.Thm),
   ("CacheClean_dcEQdc'_thm",CacheClean_dcEQdc'_thm,DB.Thm),
   ("CacheClean_dcEQdc'_diffMsb_thm",
    CacheClean_dcEQdc'_diffMsb_thm,
    DB.Thm),
   ("CacheClean_hitDc'_diffAddr_thm",
    CacheClean_hitDc'_diffAddr_thm,
    DB.Thm),
   ("CacheClean_keepMiss_diffMsb_thm",
    CacheClean_keepMiss_diffMsb_thm,
    DB.Thm),
   ("CacheInvalidate_dcEQpm'_thm",CacheInvalidate_dcEQpm'_thm,DB.Thm),
   ("CacheInvalidate_missDc'_thm",CacheInvalidate_missDc'_thm,DB.Thm),
   ("CacheInvalidate_hitDc'_diffAddr_thm",
    CacheInvalidate_hitDc'_diffAddr_thm,
    DB.Thm),
   ("CacheInvalidate_dcEQdc'_diffAddr_thm",
    CacheInvalidate_dcEQdc'_diffAddr_thm,
    DB.Thm),
   ("CacheInvalidate_keepMiss_diffMsb_thm",
    CacheInvalidate_keepMiss_diffMsb_thm,
    DB.Thm), ("msbEqAdrs_Hit_dc_thm",msbEqAdrs_Hit_dc_thm,DB.Thm),
   ("cacheRead_miss_thm",cacheRead_miss_thm,DB.Thm),
   ("cacheRead_hit_thm",cacheRead_hit_thm,DB.Thm),
   ("cacheWrite_setCell_thm",cacheWrite_setCell_thm,DB.Thm),
   ("linefill_hit_t",linefill_hit_t,DB.Thm),
   ("fill_hit_thm",fill_hit_thm,DB.Thm),
   ("cacheRead_paHitdc'_thm",cacheRead_paHitdc'_thm,DB.Thm),
   ("cacheWrite_paHitdc'_thm",cacheWrite_paHitdc'_thm,DB.Thm),
   ("cacheWrite_paNOTCHGpm_thm",cacheWrite_paNOTCHGpm_thm,DB.Thm),
   ("cacheWrite_read_thm",cacheWrite_read_thm,DB.Thm),
   ("CacheRead_lfoldEQval_SameAddress_thm",
    CacheRead_lfoldEQval_SameAddress_thm,
    DB.Thm),
   ("Fill_someEPevict_dcEQpm'_thm",Fill_someEPevict_dcEQpm'_thm,DB.Thm),
   ("CacheWrite_DiffPa_EqReadMemPa'_thm",
    CacheWrite_DiffPa_EqReadMemPa'_thm,
    DB.Thm),
   ("CacheWrite_DiffPa_EqReadMemPa'_thm3",
    CacheWrite_DiffPa_EqReadMemPa'_thm3,
    DB.Thm), ("Miss_After_Evict_th",Miss_After_Evict_th,DB.Thm)]

  local open GrammarSpecials Parse
    fun UTOFF f = Feedback.trace("Parse.unicode_trace_off_complaints",0)f
  in
  val _ = mk_local_grms [("arm_stepTheory.arm_step_grammars",
                          arm_stepTheory.arm_step_grammars),
                         ("cacheTheory.cache_grammars",
                          cacheTheory.cache_grammars)]
  val _ = List.app (update_grms reveal) []
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("invariant_cache", (Term.prim_mk_const { Name = "invariant_cache", Thy = "CacheLib"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("invariant_cache", (Term.prim_mk_const { Name = "invariant_cache", Thy = "CacheLib"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("write_mem32", (Term.prim_mk_const { Name = "write_mem32", Thy = "CacheLib"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("write_mem32", (Term.prim_mk_const { Name = "write_mem32", Thy = "CacheLib"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("WriteBackLine_simp", (Term.prim_mk_const { Name = "WriteBackLine_simp", Thy = "CacheLib"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("WriteBackLine_simp", (Term.prim_mk_const { Name = "WriteBackLine_simp", Thy = "CacheLib"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("msb_extract", (Term.prim_mk_const { Name = "msb_extract", Thy = "CacheLib"}))
  val _ = update_grms
       (UTOFF temp_overload_on)
       ("msb_extract", (Term.prim_mk_const { Name = "msb_extract", Thy = "CacheLib"}))
  val CacheLib_grammars = Parse.current_lgrms()
  end
  val _ = Theory.LoadableThyData.temp_encoded_update {
    thy = "CacheLib",
    thydataty = "compute",
    data =
        "CacheLib.invariant_cache_def CacheLib.msb_extract_def CacheLib.write_mem32_def CacheLib.WriteBackLine_simp_def"
  }

val _ = if !Globals.print_thy_loads then print "done\n" else ()
val _ = Theory.load_complete "CacheLib"
end
